(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{411:function(_,n,e){_.exports=e.p+"assets/img/gallery-view.261b91fa.png"},418:function(_,n,e){_.exports=e.p+"assets/img/speaker-view.dd7d8b06.png"},562:function(_,n,e){"use strict";e.r(n);var t=e(6),E=Object(t.a)({},(function(){var _=this,n=_.$createElement,t=_._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"会捷通客户端-sdk-linux-版-开发文档"}},[_._v("会捷通客户端 SDK (Linux 版) 开发文档")]),_._v(" "),t("h2",{attrs:{id:"概述"}},[_._v("概述")]),_._v(" "),t("p",[_._v("会捷通客户端 SDK 是⼀款视频会议终端开发套件，开发者可以利⽤本 SDK 开发出具有清晰流畅的⾳视频体验和⾼清内容协作的⾳视频会议终端应用。")]),_._v(" "),t("p",[t("img",{attrs:{src:e(411),alt:"gallery-view"}})]),_._v(" "),t("p",[_._v("会捷通客户端 SDK 具备强⼤的⽹络适应性，和独特的⾳视频抗⽹络丢包算法，配合会捷通云视讯平台使⽤，可以保证在 30% ⽹络丢包环境下视频依然清晰流畅，即使⽹络丢包⾼达 50%，依然可以保证⾳频通畅。 会捷通客户端 SDK 提供了丰富，⽽且简单易⽤的 API 接⼝。开发者不需要掌握丰富的⾳视频和信令相关知识，也可以使⽤本 SDK 开发出专业的视频会议软终端应用。 本⽂档详细介绍了 SDK 的各项功能，以及它们的使⽤⽅法。")]),_._v(" "),t("h3",{attrs:{id:"系统要求"}},[_._v("系统要求")]),_._v(" "),t("ul",[t("li",[_._v("arm64")]),_._v(" "),t("li",[_._v("Intel x86 或 x64")])]),_._v(" "),t("h2",{attrs:{id:"典型系统集成方案"}},[_._v("典型系统集成方案")]),_._v(" "),t("p",[_._v("如果您开发的产品包含客户端应用和业务服务系统，需要为系统加入音视频通讯能力时，那么您只需要在客户端集成会捷通 SDK，同时通过您的业务服务系统和会捷通平台服务 (我们的公有云服务或者您自建的私有化部署会捷通平台) 进行集成。")]),_._v(" "),t("ul",[t("li",[_._v("客户端 App 集成会捷通 SDK，通过会捷通 SDK 实现客户端建立音视频呼叫的功能")]),_._v(" "),t("li",[_._v("业务服务系统通过使用会捷通平台的 REST API 使用平台提供的功能，包括创建会议、管理会议等。")])]),_._v(" "),t("h3",{attrs:{id:"一个典型的业务流程示例"}},[_._v("一个典型的业务流程示例")]),_._v(" "),t("p",[_._v("下图简要说明了一个典型的业务流程")]),_._v(" "),t("ul",[t("li",[_._v("客户端 App 启动，进行会捷通 SDK 的初始化设置")]),_._v(" "),t("li",[_._v("客户端 App 向自己的业务系统申请创建一个视频会议")]),_._v(" "),t("li",[_._v("业务系统使用会捷通平台 API 创建一个视频会议，并把创建出的会议号码返回给客户端 App")]),_._v(" "),t("li",[_._v("客户端 App 调用会捷通 SDK 的接口方法加入到这个会议")]),_._v(" "),t("li",[_._v("客户端 App 调用会捷通 SDK 的接口方法离开会议")])]),_._v(" "),t("div",{staticClass:"language-sequence extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('"客户端 App" -> "会捷通 SDK": 调用  initialize() 等进行 SDK 初始化\n"客户端 App" -> 客户系统: API: 请求创建一个会捷通会议\n客户系统 -> "会捷通平台": API： http://[会捷通平台地址]/api/rest/v2.0/conferences (POST)\nnote over "会捷通平台": 创建一个会议\n"会捷通平台" --\x3e 客户系统: API response: 返回一个会议号码\n客户系统 --\x3e "客户端 App": API response: 返回一个会议号码\n"客户端 App" -> "会捷通 SDK": 调用 joinConference(会议号码) 进入会议\nnote over "会捷通 SDK", "会捷通平台": 建立音视频通道\n"会捷通 SDK" --\x3e "客户端 App": onCallConnected()\n"客户端 App" -> "会捷通 SDK": 调用 leaveConference() 结束呼叫 \nnote over "会捷通 SDK", "会捷通平台": 释放音视频通道\n"会捷通 SDK" --\x3e "客户端 App": onCallEnd()\n\n')])])]),t("p",[_._v("会捷通平台提供了丰富的 API 接口，您的业务系统可以根据需要选择使用。比如，在上边的例子中，可以在会议进行中通过 API 接口进行对与会者静音、开始录制会议等会议控制操作。")]),_._v(" "),t("h2",{attrs:{id:"开发入门"}},[_._v("开发入门")]),_._v(" "),t("h3",{attrs:{id:"初始化-sdk"}},[_._v("初始化 SDK")]),_._v(" "),t("p",[_._v("使用EVSDK时，需要连接库文件libevsdk.so, 编译选项添加 -levsdk。")]),_._v(" "),t("p",[_._v("程序中使用示例如下")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("IEVEngine * evengine = createEVEngine();\nEVEventObsever evobsever;\nevengine->registerEventHandler(&evobsever);\n\n\nevengine->enableHighFPS(TRUE);\nevengine->enableSecure(TRUE);\nevengine->enableAdaptiveResolution(FALSE);\n\n")])])]),t("h4",{attrs:{id:"sdk-config-文件"}},[_._v("SDK Config 文件")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('evengine->initialize("./", "config");\n')])])]),t("h4",{attrs:{id:"rootca-文件"}},[_._v("rootca 文件")]),_._v(" "),t("p",[_._v("添加 rootca.pem 文件，将⽂件拷⻉到某目录下边，设置给 SDK。")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('evengine->setRootCA("./rootca.pem");\n')])])]),t("h3",{attrs:{id:"设备设置"}},[_._v("设备设置")]),_._v(" "),t("p",[_._v("SDK 提供方法来让用户选择自己的设备，具体如下")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("std::vector<EVDevice> devices1 = evengine->getDevices(EV_DEVICE_AUDIO_CAPTURE);\nstd::vector<EVDevice> devices2 = evengine->getDevices(EV_DEVICE_AUDIO_PLAYBACK);\nstd::vector<EVDevice> devices3 = evengine->getDevices(EV_DEVICE_VIDEO_CAPTURE);\n\nEVDevice device1 = evengine->getDevice(EV_DEVICE_AUDIO_CAPTURE);\nEVDevice device2 = evengine->getDevice(EV_DEVICE_AUDIO_PLAYBACK);\nEVDevice device3 = evengine->getDevice(EV_DEVICE_VIDEO_CAPTURE);\n")])])]),t("h3",{attrs:{id:"日志设置"}},[_._v("日志设置")]),_._v(" "),t("p",[_._v("EVSDK 会持续收集日志，打开日志收集需要做以下设置")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('evengine->setLog(EV_LOG_LEVEL_MESSAGE, "./", "evsdk", 2 * 1024 * 1024);\nevengine->enableLog(TRUE, FALSE);\n')])])]),t("h3",{attrs:{id:"设置呼叫基本能力"}},[_._v("设置呼叫基本能力")]),_._v(" "),t("h4",{attrs:{id:"带宽"}},[_._v("带宽")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("#ifdef ARM_HISI_LINUX\n    int const bandwidth = 4096;\n#else\n    int const bandwidth = 1024;\n#endif\nevengine->setBandwidth(bandwidth);\n")])])]),t("h4",{attrs:{id:"接收视频流的数量上限"}},[_._v("接收视频流的数量上限")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("#ifdef ARM_HISI_LINUX\n    int const maxRxCount = 16;\n#else\n    int const maxRxCount = 4;\n#endif\nevengine->setMaxRecvVideo(maxRxCount);\n")])])]),t("h3",{attrs:{id:"登录"}},[_._v("登录")]),_._v(" "),t("h4",{attrs:{id:"用户正常登录"}},[_._v("用户正常登录")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 用户定位登录（包含等位跟登录）\n\n @param location_server 定位服务器\n @param port 端口号\n @param username 用户名\n @param password 密码\n @return 返回API结果UI可忽略\n */\nevengine->loginWithLocation(location_server, port, username, encrypted_password) ;\n/** 登录后会收到SDK以下回调 */\n//定位或者登录错误会回调\nvoid onError(EVError & err);\n//登录成功会回调\nvoid onLoginSucceed(EVUserInfo & user);\n")])])]),t("h4",{attrs:{id:"匿名方式入会"}},[_._v("匿名方式入会")]),_._v(" "),t("p",[_._v("匿名登录方式仅用于匿名呼叫的场景")]),_._v(" "),t("blockquote",[t("p",[_._v("用户匿名方式入会的时候会执行：定位平台 > 匿名登录 > 注册视频服务 > 呼叫 (其中匿名登录以及注册视频服务均由SDK 处理）")])]),_._v(" "),t("ol",[t("li",[t("p",[_._v("定位服务、匿名登录、注册视频服务统一都由SDK处理只需要调用以下 API")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 用户执行匿名登录入会\n\n @param location_server 定位服务器\n @param port 端口号\n @param conference_number 会议号码\n @param display_name 用户在会议中的名称\n @param password 会议密码\n @return 返回 SDK 处理结果，UI一般可忽略\n */\nevengine->joinConferenceWithLocation(location_server, port, conference_number,  display_name, password);\n")])])])])]),_._v(" "),t("h3",{attrs:{id:"窗口设置"}},[_._v("窗口设置")]),_._v(" "),t("p",[_._v("EVSDK视频窗口分为三类： 远端主流窗口，本地视频窗口，内容流窗口 (辅流）")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("远端窗口设置")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 设置远端窗口\n\n @param id 远端窗口数组\n @param size 远端窗口数量\n @return 返回结果（UI可以忽视,不作处理）\n */\n #ifdef ARM_HISI_LINUX\n    int const maxRxCount = 16;\n#else\n    int const maxRxCount = 4;\n#endif\nevengine->setMaxRecvVideo(maxRxCount);\n\nint setRemoteVideoWindow(void * id[], unsigned int size);\n\n//示例代码(remoteArr 里的元素为view对象)\nvoid * remoteArr[maxRxCount];\nevengine->setRemoteVideoWindow(remoteArr,maxRxCount);\n")])])])]),_._v(" "),t("li",[t("p",[_._v("本地窗口设置")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 设置本地窗口\n\n @param id 本地窗口对象\n @return 返回结果（UI可以忽视,不作处理）\n */\nint setLocalVideoWindow(void * id)\n//示例代码（本地窗口为view对象）\nevengine->setLocalVideoWindow(view);\n")])])])]),_._v(" "),t("li",[t("p",[_._v("内容窗口设置")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 设置内容窗口\n\n @param id 内容窗口对象\n @return 返回结果（UI可以忽视,不作处理）\n */\nint setRemoteContentWindow(void * id)\n//示例代码（内容窗口为View对象）\nevengineint->setRemoteContentWindow(view);\n")])])])])]),_._v(" "),t("h3",{attrs:{id:"实现视频通话"}},[_._v("实现视频通话")]),_._v(" "),t("p",[_._v("视频通话主要分为两种，一种是匿名入会（参考登录模块的匿名登录入会），一种是用户登录后入会")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("设置用户入会后的头像以及视频背景图片（关闭摄像头所展示的图片）")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('/**\n 设置会议中用户的头像以及背景图片\n\n @param background_file_path 背景图片\n @param user_image_path 用户图片\n @return UI可不作处理\n */\nint setUserImage(const char * background_file_path, const char * user_image_path)\n//示例\nImage *bgimagepath = @"背景图片地址";\nImage *userimagepath = @"头像图片地址";\nevengine->setUserImage(bgimagepath, userimagepath);\n')])])])]),_._v(" "),t("li",[t("p",[_._v("用户登录后主动入会")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('/**\n 用户加入会议\n\n @param conference_number 会议号码\n @param display_name 会议中显示的名称\n @param password 会议密码\n @return 返回结果（UI）可忽略\n */\nint joinConference(const char * conference_number, const char * display_name, const char * password);\n//示例 注：会议如果没有密码可以不用给SDK传值，不传display_name则SDK会取用户名称当作会议名称\nevengine->joinConference("会议号码", "会议中显示的名称", "会议密码");\n')])])])]),_._v(" "),t("li",[t("p",[_._v("当调用了入会的 API 后，UI 会收到 SDK 回调：入会成功、入会失败。需要做出处理")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("//入会失败会回调\nvoid onCallEnd(EVCallInfo & info);\n//入会成功会回调\nvoid onCallConnected(EVCallInfo & info);\n")])])])])]),_._v(" "),t("h3",{attrs:{id:"分屏模式"}},[_._v("分屏模式")]),_._v(" "),t("p",[_._v("分屏模式指的是 App 的 UI 如何为接收到的远端视频布局展示。典型分屏样式示例：主讲视图 (即一大多小布局) 和画廊视图 (平均大小布局)。当布局样式为主讲视图时，一般希望大窗口显示的视频流分辨率比较其他远端视频流更高，而当布局样式为画廊视图时，一般希望每个视频流的分辨率尽量一致。因此，在 UI 需要改变布局样式时，需要通知 SDK，这样 SDK 可以根据需要向平台发出响应请求，告知平台 UI 希望呈现的分屏布局样式，从而平台可以尽量提供满足 app 需要的视频流。")]),_._v(" "),t("p",[_._v("另外，当平台侧通过会议控制，对分屏进行改变时，SDK 也会接收到变化通知，此时 SDK 通知 UI 分屏模式发生了何种变化，UI 应该根据变化的样式进行对应的布局改变。")]),_._v(" "),t("p",[_._v("相关细节可参考 API 参考的布局类型、分屏样式请求和布局变化事件回调部分。")]),_._v(" "),t("ul",[t("li",[_._v("主讲视图 (一大多小布局) 实现示例")])]),_._v(" "),t("p",[t("img",{attrs:{src:e(418),alt:"主讲视图"}})]),_._v(" "),t("p",[_._v("主讲视图模式")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 设置视频模式（主讲模式、画廊模式）\n\n @param layout EVLayoutRequest对象\n @return 返回结果(UI可不作处理)\n */\nint setLayout(EVLayoutRequest & layout);\n//示例代码里主讲视图模式下 主视频窗口可以显示为1x5的窗口模式\nEVLayoutRequest *layout = new EVLayoutRequest();\nlayout.page = EVLayoutCurrentPage;\n/* UI请求展示哪一页，如果是EV_LAYOUT_NEXT_PAGE，则下一次收到的onLayoutIndication是下一页可展示的窗口；如果是EV_LAYOUT_PREV_PAGE，则下一次收到的onLayoutIndication是前一页可展示的窗口。\n*/\nlayout.mode = EVLayoutSpeakerMode;\nlayout.max_type = EVLayoutType_5_4T_1B;\n\n/*可以使用在主讲模式下的类型是除画廊模式以外的类型和EV_LAYOUT_TYPE_1，此设置是最大可以使用的布局类型，服务器会根据当前入会人数，返回比枚举max_type值小的主讲模式可以选择的枚举项 */\n\nEVVideoSize vsize;\nvsize.width = 1280;\nvsize.height = 720;\nlayout.max_resolution = vsize;\nevengine->setLayout(layout);\n")])])]),t("ul",[t("li",[_._v("画廊视图 (平均大小布局) 实现示例")])]),_._v(" "),t("p",[t("img",{attrs:{src:e(411),alt:"画廊视图"}})]),_._v(" "),t("p",[_._v("画廊视图模式")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 设置视频模式（主讲模式、画廊模式）\n\n @param layout EVLayoutRequest对象\n @return 返回结果(UI可不作处理)\n */\nint setLayout(EVLayoutRequest & layout);\n//示例代码里画廊视图模式下 主视频窗口可以显示为1x1、1x2、2x2、2x3、3x3的窗口模式（可根据需要调整窗口位置）\nEVLayoutRequest *layout = new EVLayoutRequest();\nlayout.page = EVLayoutCurrentPage;\nlayout.mode = EVLayoutGalleryMode;\nlayout.max_type = EVLayoutType_9;\n\n/*可以使用在gallery模式下的类型有EV_LAYOUT_TYPE_1，EV_LAYOUT_TYPE_2H，EV_LAYOUT_TYPE_4，EV_LAYOUT_TYPE_9，EV_LAYOUT_TYPE_16，EV_LAYOUT_TYPE_25，EV_LAYOUT_TYPE_36。这个设置是最大可以使用的类型。比如设置了EV_LAYOUT_TYPE_9，那服务器会根据当前入会人数，返回可能的类型包括EV_LAYOUT_TYPE_2H，EV_LAYOUT_TYPE_4，EV_LAYOUT_TYPE_9，也就是比枚举EV_LAYOUT_TYPE_9值小的画廊模式可以选择的枚举项 */\n\nEVVideoSize vsize;\nvsize.width = 0;\nvsize.height = 0;\nlayout.max_resolution = vsize; //用户不用设置，由SDK决定使用默认设置。\nevengine->setLayout(layout);\n")])])]),t("h3",{attrs:{id:"静音和解除静音"}},[_._v("静音和解除静音")]),_._v(" "),t("p",[_._v("执行本地麦克风开启或者关闭")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 是否启用麦克风\n\n @param enable YES为开启NO为关闭\n @return 返回结果可忽视\n */\nint enableMicMeter(bool enable);\n//示例代码\n1.关闭麦克风\nevengine->enableMic(false);\n2.开启麦克风\nevengine->enableMic(true);\n")])])]),t("h3",{attrs:{id:"关闭或打开本地视频"}},[_._v("关闭或打开本地视频")]),_._v(" "),t("p",[_._v("执行本地摄像头开启或者关闭")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 是否启用摄像头\n\n @param enable YES为开启NO为关闭\n @return 返回结果可忽视\n */\nint enableCamera(bool enable)\n //示例代码\n 1.关闭摄像头\n evengine->enableCamera(false);\n 2.开启摄像头\n evengine->enableCamera(true);\n")])])]),t("h3",{attrs:{id:"接收和显示共享内容"}},[_._v("接收和显示共享内容")]),_._v(" "),t("p",[_._v("当为 EVSDK 设置了内容窗口的时候，收到共享或者共享结束 SDK 都会通过回调的形式告诉终端")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("/**\n 接收到内容分享或者内容分享结束的回调\n\n @param info EVContentInfo对象\n */\nvoid onContent(EVContentInfo & info);\n//示例代码\nvoid onContent(EVContentInfo & info)\n{\n   if (info.type == EVStreamContent || info.type == EVStreamWhiteBoard) {\n      if (info.enabled) {\n                //收到分享（如果设置了内容窗口那么应该在此处显示出你的内容窗口，如果没有设置内容窗口SDK将会弹出一个窗口来显示分享内容）\n      }else{\n                //分享结束(应该在此处隐藏或者关闭你的分享窗口)\n      }\n   }\n}\n")])])]),t("h3",{attrs:{id:"发送共享内容"}},[_._v("发送共享内容")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("evengine->sendContent();\nevengine->sendWhiteBoard();\n")])])]),t("h3",{attrs:{id:"接收到分屏变化通知时应如何处理"}},[_._v("接收到分屏变化通知时应如何处理")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("void onLayoutIndication(EVLayoutIndication & layout) {\n    //当参会人数发生改变时，比如有人参会，有人离开会议；或者speaker布局下，主讲人发生改变时，会得到这个通知，此时，UI需要从新布局所有窗口。\n    //EV_LAYOUT_MODE mode; 当前应该展示的布局模式。\n    //EV_LAYOUT_MODE setting_mode;服务器当前使用的布局模式。\n    //EV_LAYOUT_TYPE type; 当前应该展示的布局具体类型。\n    //bool mode_settable;  服务器的设置，用来通知客户端是否可以改变布局模式。\n    //std::string speaker_name; 主讲人名字\n    //int speaker_index; 主讲人所在窗口的下标\n    //unsigned int sites_size; 一共有多少个可展示窗口\n   // EVSite sites[EV_LAYOUT_SIZE]; 可展示窗口的数组。\n}\n\nvoid onLayoutSiteIndication(EVSite & site) {\n    //当前展示的窗口属性发生变化时会得到这个通知，比如某个参会人名字或audio mute状态发生改变，通过device_id可以查找是哪个参会人发生了改变。UI需要更新相应的窗口状态。\n}\n\nvoid onLayoutSpeakerIndication(EVLayoutSpeakerIndication & speaker) {\n    //在gallery布局样式下，如果主讲人发生变化，会得到这个通知，客户端可以在主讲人所在的view上更新样式，比如加黄边框。speaker_index对应于最近一次收到的onLayoutIndication中的可展示窗口数组的下标。\n}   \n\n")])])]),t("h3",{attrs:{id:"结束呼叫"}},[_._v("结束呼叫")]),_._v(" "),t("p",[_._v("在需要结束呼叫的时候调用 SDK 的离会 API")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("int leaveConference();\n//示例代码\nevengine->leaveConference();\n//退出成功后，会收到sdk的回调\nvoid onCallEnd(EVCallInfo & info);\n")])])]),t("h2",{attrs:{id:"api-参考"}},[_._v("API 参考")]),_._v(" "),t("h3",{attrs:{id:"类型和常量"}},[_._v("类型和常量")]),_._v(" "),t("h4",{attrs:{id:"设备"}},[_._v("设备")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("typedef enum _EV_DEVICE_TYPE {\n    EV_DEVICE_AUDIO_CAPTURE = 0,\n    EV_DEVICE_AUDIO_PLAYBACK = 1,\n    EV_DEVICE_VIDEO_CAPTURE = 2 \n} EV_DEVICE_TYPE;\n\nclass EV_CLASS_API EVDevice {\npublic:\n    EVDevice() {\n        clear();\n    }\n\n    void clear() {\n        id = -1;\n        type = EV_DEVICE_AUDIO_CAPTURE;\n        name.clear();\n        desc.clear();\n    }\n    unsigned int id;\n    EV_DEVICE_TYPE type;\n    std::string name;\n    std::string desc;\n};\n\n")])])]),t("h4",{attrs:{id:"布局类型"}},[_._v("布局类型")]),_._v(" "),t("p",[_._v("用于设置布局类型请求，通常仅需要典型画廊视图或主讲视图样式。当需要画廊视图时，应选择 nxn 的类型，而需要主讲视图时应选择 1+n 的类型。假设 app 设计的最大接收视频数为 16 ，那么画廊视图时设置为 4x4 (EV_LAYOUT_TYPE_16) 布局，而对主讲视图设置为 1+16 (EV_LAYOUT_TYPE_1TLP16) 布局即可。平台会根据 SDK 的布局设置，尽可能提供适合的视频流。")]),_._v(" "),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("typedef enum _EV_LAYOUT_TYPE{\n    EV_LAYOUT_TYPE_AUTO       = -1,\n    EV_LAYOUT_TYPE_1          = 101,\t\t// 1x1\n    EV_LAYOUT_TYPE_2H         = 201,\t\t// 1x2\n    EV_LAYOUT_TYPE_2V         = 202,\t\t// 2x1\n    EV_LAYOUT_TYPE_2H_2       = 203,\t\t// \n    EV_LAYOUT_TYPE_2V_2       = 204,\n    EV_LAYOUT_TYPE_2_1IN1     = 205,\n    EV_LAYOUT_TYPE_2_1L_1RS   = 207,\n    EV_LAYOUT_TYPE_3_1T_2B    = 301,\t\t\n    EV_LAYOUT_TYPE_3_2T_1B    = 302,\n    EV_LAYOUT_TYPE_3_1L_2R    = 303,\n    EV_LAYOUT_TYPE_3_2IN1     = 304,\n    EV_LAYOUT_TYPE_1P2W       = 305,\n    EV_LAYOUT_TYPE_4          = 401,\t\t// 2x2\n    EV_LAYOUT_TYPE_4_3T_1B    = 402,\n    EV_LAYOUT_TYPE_4_1L_3R    = 403,\n    EV_LAYOUT_TYPE_4_1T_3B    = 404,\n    EV_LAYOUT_TYPE_4_3IN1     = 405,\n    EV_LAYOUT_TYPE_5_1L_4R    = 501,\n    EV_LAYOUT_TYPE_5_4T_1B    = 502,\n    EV_LAYOUT_TYPE_5_1T_4B    = 503,\n    EV_LAYOUT_TYPE_6          = 601,\t\t// 1+5\n    EV_LAYOUT_TYPE_6W         = 602,\n    EV_LAYOUT_TYPE_2P4W       = 603,\n    EV_LAYOUT_TYPE_6CP        = 604,\n    EV_LAYOUT_TYPE_8          = 801,\t\t// 1+7\n    EV_LAYOUT_TYPE_9          = 901,\t\t// 3x3\n    EV_LAYOUT_TYPE_9_1IN_8OUT = 902,\t\t// 1+8\n    EV_LAYOUT_TYPE_9_8T_1B    = 903,\t\t// 1+8\n    EV_LAYOUT_TYPE_9_1T_8B    = 904,\t\t// 1+8\n    EV_LAYOUT_TYPE_10         = 1001,\t\t// 2+8\n    EV_LAYOUT_TYPE_2TP8B      = 1002,\t\t// 2+8\n    EV_LAYOUT_TYPE_2CP4L4R    = 1003,\n    EV_LAYOUT_TYPE_12W        = 1201,\n    EV_LAYOUT_TYPE_13         = 1301,\n    EV_LAYOUT_TYPE_1LTP12     = 1302,\n    EV_LAYOUT_TYPE_16         = 1601,\t\t// 4x4\n\t\t...... \n    EV_LAYOUT_TYPE_1TLP16     = 1701,\t\t// 1+16\n\t\t......\n\n} EV_LAYOUT_TYPE;  \n")])])]),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("typedef enum _EV_LAYOUT_MODE{\n    EV_LAYOUT_AUTO_MODE =  0,\n    EV_LAYOUT_GALLERY_MODE =  1,\n    EV_LAYOUT_SPEAKER_MODE =  2,\n    EV_LAYOUT_SPECIFIED_MODE =  3\n} EV_LAYOUT_MODE;\n")])])]),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("typedef enum _EV_LAYOUT_PAGE{\n    EV_LAYOUT_CURRENT_PAGE = 0,\n    EV_LAYOUT_PREV_PAGE = 1,\n    EV_LAYOUT_NEXT_PAGE = 2\n} EV_LAYOUT_PAGE;\n")])])]),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("class EV_CLASS_API EVLayoutRequest {\npublic:\n    EVLayoutRequest() {\n        clear();\n    }\n    void clear() {\n        mode = EV_LAYOUT_AUTO_MODE;\n        max_type = EV_LAYOUT_TYPE_AUTO;\n        page = EV_LAYOUT_CURRENT_PAGE;\n        max_resolution.width = max_resolution.height = 0;\n        windows_size = 0;\n        memset(windows, 0, sizeof(windows));\n    }\n    EV_LAYOUT_MODE mode;\n    EV_LAYOUT_TYPE max_type;\n    EV_LAYOUT_PAGE page;\n    EVVideoSize max_resolution;\n    unsigned int windows_size;\n    void * windows[EV_LAYOUT_SIZE];\n};\n\n")])])]),t("h4",{attrs:{id:"布局更新消息"}},[_._v("布局更新消息")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('class EV_CLASS_API EVLayoutIndication {\npublic:\n    EVLayoutIndication() {\n        clear();\n    }\n    void clear() {\n        mode = EV_LAYOUT_AUTO_MODE;\n        setting_mode = EV_LAYOUT_AUTO_MODE;\n        type = EV_LAYOUT_TYPE_1;\n        mode_settable = TRUE;\n        speaker_name = "";\n        speaker_index = -1;\n        sites_size = 0;\n        int i;\n        for(i = 0; i < EV_LAYOUT_SIZE; i++) {\n            sites[i].clear();\n        }\n    }\n    EV_LAYOUT_MODE mode;\n    EV_LAYOUT_MODE setting_mode;\n    EV_LAYOUT_TYPE type;\n    bool mode_settable;\n    std::string speaker_name;\n    int speaker_index;\n    unsigned int sites_size;\n    EVSite sites[EV_LAYOUT_SIZE];\n};\n\n')])])]),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('class EV_CLASS_API EVSite {\npublic:\n    EVSite() {\n        clear();\n    }\n    void clear() {\n        window = NULL;\n        is_local = TRUE;\n        name = "";\n        device_id = 0;\n        mic_muted = FALSE;\n        remote_muted = FALSE;\n    }\n    void * window;\n    bool is_local;\n    std::string name;\n    uint64_t device_id;\n    bool mic_muted;\n    bool remote_muted;\n};\n\n')])])]),t("h4",{attrs:{id:"错误和警告类型"}},[_._v("错误和警告类型")]),_._v(" "),t("blockquote",[t("p",[_._v("错误码定义可参考附录错误码章节")])]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("typedef enum _EV_ERROR_TYPE {\n    EV_ERROR_TYPE_SDK = 0,\n    EV_ERROR_TYPE_SERVER = 1,\n    EV_ERROR_TYPE_LOCATE = 2,\n    EV_ERROR_TYPE_CALL = 3,\n    EV_ERROR_TYPE_AV_SERVER = 4,\n    EV_ERROR_TYPE_UNKNOWN = 5 \n} EV_ERROR_TYPE;\n\nclass EV_CLASS_API EVError {\npublic:\n    EVError() {\n        clear();\n    }\n\n    void clear() {\n        type = common::EV_ERROR_TYPE_UNKNOWN;\n        action.clear();\n        code = 0;\n        msg.clear();\n        args.clear();\n    }\n\n    common::EV_ERROR_TYPE type;\n    std::string action;\n    int code;\n    std::string msg;\n    std::vector<std::string> args;\n};  \n\n")])])]),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("typedef enum _EV_WARN {\n    EV_WARN_NETWORK_POOR = 0,\n    EV_WARN_NETWORK_VERY_POOR = 1,\n    EV_WARN_BANDWIDTH_INSUFFICIENT = 2,\n    EV_WARN_BANDWIDTH_VERY_INSUFFICIENT = 3,\n    EV_WARN_NO_AUDIO_CAPTURE_CARD = 4,\n    EV_WARN_UNMUTE_AUDIO_NOT_ALLOWED = 5,\n    EV_WARN_UNMUTE_AUDIO_INDICATION = 6\n} EV_WARN;\n\nclass EV_CLASS_API EVWarn {\npublic:\n    EV_WARN code;\n    std::string msg;\n};\n\n")])])]),t("h4",{attrs:{id:"呼叫信息"}},[_._v("呼叫信息")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("class EV_CLASS_API EVCallInfo {\npublic:\n    EVCallInfo() {\n        clear();\n    }\n\n    void clear() {\n        isAudioOnly = FALSE;\n        contentEnabled = TRUE;\n        peer.clear();\n        conference_number.clear();\n        password.clear();\n        err.clear();\n        isBigConference = FALSE;\n        isRemoteMuted = FALSE;\n        svcCallType = EV_SVC_CALL_CONF;\n    }\n\n    bool isAudioOnly;\n    bool contentEnabled;\n    bool isBigConference;\n    bool isRemoteMuted;\n    std::string peer;\n    std::string conference_number;\n    std::string password;\n    EVError err;\n    EV_SVC_CALL_TYPE svcCallType;\n    EV_SVC_CALL_ACTION svcCallAction;\n};\n\n")])])]),t("h4",{attrs:{id:"媒体统计信息"}},[_._v("媒体统计信息")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("class EV_CLASS_API EVStreamStats {\npublic:\n    EV_STREAM_TYPE type;\n    EV_STREAM_DIR dir;\n    std::string payload_type;\n    float nego_bandwidth; //kbps\n    float real_bandwidth; //kbps\n    uint64_t cum_packet;\n    float fps;  //Video only\n    EVVideoSize resolution; //Video only\n    uint64_t cum_packet_loss;\n    float packet_loss_rate;\n    bool is_encrypted;\n    unsigned int ssrc;\n    std::string name;\n};\n\nclass EV_CLASS_API EVStats {\npublic:\n    unsigned int size;\n    EVStreamStats stats[EV_STREAM_SIZE];\n};\n\nclass EV_CLASS_API EVVideoSize {\npublic:\n    int width;\n    int height;\n};\n")])])]),t("h3",{attrs:{id:"事件回调"}},[_._v("事件回调")]),_._v(" "),t("p",[t("code",[_._v("class EV_CLASS_API IEVEventHandler")]),_._v(" 类提供了 SDK 回调处理方法的定义，使用者需要实现该 Handler，并在 SDK 初始化阶段将 Handler 设置给 SDK，SDK 在发生事件时通过回调 Handler 的相应方法通知 app UI。")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("class EV_CLASS_API IEVEventHandler {\npublic:\n    ......\n};  \n")])])]),t("blockquote",[t("p",[_._v("以下各节介绍每一个 Handler 方法")])]),_._v(" "),t("h4",{attrs:{id:"登录和注册状态变化"}},[_._v("登录和注册状态变化")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("virtual void onLoginSucceed(EVUserInfo & user) {\n  (void)user;\n}\n")])])]),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("virtual void onRegister(bool registered) {\n  (void)registered;\n}\n")])])]),t("h4",{attrs:{id:"呼叫状态变化"}},[_._v("呼叫状态变化")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("virtual void onCallConnected(EVCallInfo & info) {\n  (void)info;\n}\n\nvirtual void onCallPeerConnected(EVCallInfo & info) {\n  (void)info;\n}   \n\nvirtual void onCallEnd(EVCallInfo & info) {\n  (void)info;\n}   \n")])])]),t("h4",{attrs:{id:"分屏变化"}},[_._v("分屏变化")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("virtual void onLayoutIndication(EVLayoutIndication & layout) {\n  (void)layout;\n}   \n")])])]),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("virtual void onLayoutSiteIndication(EVSite & site) {\n  (void)site;\n}   \n")])])]),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("virtual void onLayoutSpeakerIndication(EVLayoutSpeakerIndication & speaker) {\n  (void)speaker;\n}   \n")])])]),t("h4",{attrs:{id:"辅流状态变化"}},[_._v("辅流状态变化")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("virtual void onContent(EVContentInfo & info) {\n  (void)info;\n}   \n")])])]),t("h4",{attrs:{id:"错误和异常"}},[_._v("错误和异常")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("virtual void onError(EVError & err) {\n  (void)err;\n}\n\nvirtual void onWarn(EVWarn & warn) {\n  (void)warn;\n}\n")])])]),t("h4",{attrs:{id:"其他事件"}},[_._v("其他事件")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("// 检测到静音时讲话\nvirtual void onMuteSpeakingDetected() {\n}   \n\nvirtual void onCallLogUpdated(EVCallLog & call_log) {\n  (void)call_log;\n}   \n\n// 被平台静音通知\nvirtual void onMicMutedShow(int mic_muted) {\n  (void)mic_muted;\n}   \n\nvirtual void onJoinConferenceIndication(EVCallInfo & info) {\n  (void)info;\n}   \n\n// 平台下发会议录制状态通知\nvirtual void onRecordingIndication(EVRecordingInfo & state) {\n  (void)state;\n}   \n\n// 平台下发字幕内容通知\nvirtual void onMessageOverlay(EVMessageOverlay & msg) {\n  (void)msg;\n}   \n\n// 与会者人数变化通知\nvirtual void onParticipant(int number) {\n  (void)number;\n}   \n\nvirtual void onDownloadUserImageComplete(const char * path) {\n  (void)path;\n}\n\nvirtual void onUploadUserImageComplete(const char * path) {\n  (void)path;\n}\n\n// 网络状态变化通知\nvirtual void onNetworkState(bool reachable) {\n  (void)reachable;\n}\n\n// 网络质量变化通知\nvirtual void onNetworkQuality(float quality_rating) {\n  (void)quality_rating;\n}\n")])])]),t("h3",{attrs:{id:"接口方法"}},[_._v("接口方法")]),_._v(" "),t("h4",{attrs:{id:"创建和销毁"}},[_._v("创建和销毁")]),_._v(" "),t("ul",[t("li",[_._v("EV_API ev::engine::IEVEngine* createEVEngine();")])]),_._v(" "),t("p",[_._v("创建 EVEngine 实例")]),_._v(" "),t("ul",[t("li",[_._v("EV_API void deleteEVEngine(ev::engine::IEVEngine* engine);")])]),_._v(" "),t("p",[_._v("销毁 EVEngine 实例")]),_._v(" "),t("blockquote",[t("p",[_._v("以下方法均为 EV_API ev::engine::IEVEngine 的方法")])]),_._v(" "),t("h4",{attrs:{id:"日志"}},[_._v("日志")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("virtual void setLog(EV_LOG_LEVEL level, const char * log_path, const char * log_file_name, unsigned int max_file_size)")])]),_._v(" "),t("li",[t("p",[_._v("virtual void setConsoleLog(EV_LOG_LEVEL level)")])]),_._v(" "),t("li",[t("p",[_._v("virtual void enableLog(bool enable)")])]),_._v(" "),t("li",[t("p",[_._v("virtual std::string compressLog()")])]),_._v(" "),t("li",[t("p",[_._v("virtual int setCallLogMaxSize(unsigned int num)")])]),_._v(" "),t("li",[t("p",[_._v("virtual std::vector"),t("EVCallLog",[_._v(" getCallLog()")])],1)]),_._v(" "),t("li",[t("p",[_._v("virtual int removeCallLog(const char * id)")])])]),_._v(" "),t("h4",{attrs:{id:"初始化"}},[_._v("初始化")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("virtual int initialize(const char *config_path, const char * config_file_name)")]),_._v(" "),t("p",[t("code",[_._v("const char * config_path")]),_._v(" - SDK config 文件路径")]),_._v(" "),t("p",[t("code",[_._v("const char * config_file_name")]),_._v(" - SDK config 文件名")])])]),_._v(" "),t("p",[_._v("初始化 SDK")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("virtual int setRootCA(const char * root_ca_path)")]),_._v(" "),t("p",[t("code",[_._v("const chat * root_ca_path")]),_._v(" - rootca 文件路径")])])]),_._v(" "),t("p",[_._v("设置 rootca 文件路径")]),_._v(" "),t("ul",[t("li",[_._v("virtual int setUserImage(const char * background_file_path, const char * user_image_path)")]),_._v(" "),t("li",[_._v("virtual int setUserAgent(const char * company, const char * version)")]),_._v(" "),t("li",[_._v("virtual int release()")]),_._v(" "),t("li",[_._v("virtual int enableSecure(bool enable)")])]),_._v(" "),t("h4",{attrs:{id:"设备-2"}},[_._v("设备")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("virtual std::vector"),t("EVDevice",[_._v(" getDevices(EV_DEVICE_TYPE type)")])],1)]),_._v(" "),t("li",[t("p",[_._v("virtual void setDevice(EV_DEVICE_TYPE type, unsigned int id)")])]),_._v(" "),t("li",[t("p",[_._v("virtual EVDevice getDevice(EV_DEVICE_TYPE type)")]),_._v(" "),t("p",[t("code",[_._v("EV_DEVICE_TYPE type")]),_._v(" - 设备类型")])])]),_._v(" "),t("p",[_._v("获取指定类型设备当前的选择")]),_._v(" "),t("ul",[t("li",[_._v("virtual int setDeviceRotation(int rotation)")])]),_._v(" "),t("blockquote",[t("p",[_._v("此方法是手机端用来设置摄像头方向的，通常 Linux 系统下不需要此方法")])]),_._v(" "),t("h4",{attrs:{id:"注册事件处理器"}},[_._v("注册事件处理器")]),_._v(" "),t("ul",[t("li",[_._v("virtual int registerEventHandler(IEVEventHandler * handler)")]),_._v(" "),t("li",[_._v("virtual int unregisterEventHandler(IEVEventHandler * handler)")])]),_._v(" "),t("h4",{attrs:{id:"设置能力"}},[_._v("设置能力")]),_._v(" "),t("ul",[t("li",[_._v("virtual int setMaxRecvVideo(unsigned int num)")])]),_._v(" "),t("h4",{attrs:{id:"窗口"}},[_._v("窗口")]),_._v(" "),t("ul",[t("li",[_._v("virtual int setLocalVideoWindow(void * id)")]),_._v(" "),t("li",[_._v("virtual int setRemoteContentWindow(void * id)")]),_._v(" "),t("li",[_._v("virtual int setRemoteVideoWindow(void * id[], unsigned int size)")]),_._v(" "),t("li",[_._v("virtual int setLocalContentWindow(void * id, EV_CONTENT_MODE mode)")]),_._v(" "),t("li",[_._v("virtual int setLocalContentArea(int x, int y, int width, int height)")]),_._v(" "),t("li",[_._v("virtual void * getLocalVideoWindow()")]),_._v(" "),t("li",[_._v("virtual int getRemoteVideoWindow(void * id[], unsigned int size)")]),_._v(" "),t("li",[_._v("virtual void * getRemoteContentWindow()")]),_._v(" "),t("li",[_._v("virtual void * getLocalContentWindow()")])]),_._v(" "),t("h4",{attrs:{id:"用户登录和登出"}},[_._v("用户登录和登出")]),_._v(" "),t("ul",[t("li",[_._v("virtual int loginWithLocation(const char * location_server, unsigned int port, const char * username,")]),_._v(" "),t("li",[_._v("const char * encrypted_password)")]),_._v(" "),t("li",[_._v("virtual int logout()")]),_._v(" "),t("li",[_._v("virtual std::string encryptPassword(const char * password)")]),_._v(" "),t("li",[_._v("virtual std::string encryptPassword(EV_ENCRYPT_TYPE type, const char * password)")]),_._v(" "),t("li",[_._v("virtual int downloadUserImage(const char * path)")]),_._v(" "),t("li",[_._v("virtual int uploadUserImage(const char * path)")]),_._v(" "),t("li",[_._v("virtual int changePassword(const char * encrypted_oldpassword, const char *")]),_._v(" "),t("li",[_._v("encrypted_newpassword)")]),_._v(" "),t("li",[_._v("virtual int changeDisplayName(const char * display_name)")]),_._v(" "),t("li",[_._v("virtual int getUserInfo(EVUserInfo & userinfo)")]),_._v(" "),t("li",[_._v("virtual std::string getDisplayName()")])]),_._v(" "),t("h4",{attrs:{id:"呼叫会议"}},[_._v("呼叫会议")]),_._v(" "),t("ul",[t("li",[_._v("virtual int setBandwidth(unsigned int kbps)")]),_._v(" "),t("li",[_._v("virtual unsigned int getBandwidth()")]),_._v(" "),t("li",[_._v("virtual bool highFPSEnabled()")]),_._v(" "),t("li",[_._v("virtual int enableHighFPS(bool enable)")]),_._v(" "),t("li",[_._v("virtual int enableHD(bool enable)")]),_._v(" "),t("li",[_._v("virtual bool HDEnabled()")]),_._v(" "),t("li",[_._v("virtual int joinConference(const char * conference_number, const char * display_name, const char * password)")]),_._v(" "),t("li",[_._v("virtual int joinConference(const char * number, const char * display_name, const char * password, EV_SVC_CALL_TYPE type)")]),_._v(" "),t("li",[_._v("virtual int joinConferenceWithLocation(const char * location_server, unsigned int port, const char * conference_number, const char * display_name, const char * password)")])]),_._v(" "),t("blockquote",[t("p",[_._v("匿名方式入会使用此方法")])]),_._v(" "),t("ul",[t("li",[_._v("virtual int leaveConference()")])]),_._v(" "),t("p",[_._v("挂断会议")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("virtual int setInConfDisplayName(const char * display_name, int len)")]),_._v(" "),t("p",[t("code",[_._v("display_name")]),_._v(" - 用于显示的会场名称")]),_._v(" "),t("p",[t("code",[_._v("len")]),_._v(" - display_name 长度")])])]),_._v(" "),t("p",[_._v("会议中设置显示的会场名称")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("virtual int declineIncommingCall(const char * conference_number)")]),_._v(" "),t("p",[t("code",[_._v("const char * conference_number")]),_._v(" - 来电会议号码")])])]),_._v(" "),t("p",[_._v("拒绝来电。当有来电时，用户选择拒绝接听时，使用此方法。")]),_._v(" "),t("blockquote",[t("p",[_._v("拒绝入会邀请")])]),_._v(" "),t("h4",{attrs:{id:"功能操作"}},[_._v("功能操作")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("virtual int enablePreview(bool enable)")])]),_._v(" "),t("li",[t("p",[_._v("virtual bool cameraEnabled()")])]),_._v(" "),t("li",[t("p",[_._v("virtual int enableCamera(bool enable)")]),_._v(" "),t("p",[t("code",[_._v("bool enable")]),_._v(" - true 表示打开")])])]),_._v(" "),t("p",[_._v("打开/关闭摄像头。enable 为 true 时，主流视频为正常的输入采集视频，为 false 时主流视频改为视频被屏蔽的静止视频，帧率为 1 fps。")]),_._v(" "),t("ul",[t("li",[_._v("virtual int switchCamera()")]),_._v(" "),t("li",[_._v("virtual bool micEnabled()")]),_._v(" "),t("li",[_._v("virtual int enableMic(bool enable)")]),_._v(" "),t("li",[_._v("virtual int enableSpeaker(bool enable)")]),_._v(" "),t("li",[_._v("virtual bool remoteMuted()")]),_._v(" "),t("li",[_._v("virtual int requestRemoteUnmute(bool val)")]),_._v(" "),t("li",[_._v("virtual float getNetworkQuality()")]),_._v(" "),t("li",[_._v("virtual int getStats(EVStats & stats)")])]),_._v(" "),t("p",[_._v("获取媒体统计信息")]),_._v(" "),t("ul",[t("li",[_._v("virtual int getCallInfo(EVCallInfo & call_info)")])]),_._v(" "),t("p",[_._v("获取呼叫信息")]),_._v(" "),t("ul",[t("li",[_._v("virtual int getContentInfo(EVContentInfo & content_info)")])]),_._v(" "),t("p",[_._v("获取辅流信息")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("virtual int setVideoActive(int active)")])]),_._v(" "),t("li",[t("p",[_._v("virtual int videoActive()")])]),_._v(" "),t("li",[t("p",[_._v("virtual int enableAdaptiveResolution(bool enable)")])]),_._v(" "),t("li",[t("p",[_._v("virtual bool adaptiveResolutionEnabled()")])])]),_._v(" "),t("h4",{attrs:{id:"辅流-也称双流"}},[_._v("辅流 （也称双流）")]),_._v(" "),t("ul",[t("li",[_._v("virtual int sendContent()")]),_._v(" "),t("li",[_._v("virtual int stopContent()")]),_._v(" "),t("li",[_._v("virtual int enableContentAudio(bool enable)")]),_._v(" "),t("li",[_._v("virtual bool contentAudioEnabled()")])]),_._v(" "),t("h4",{attrs:{id:"分屏样式请求"}},[_._v("分屏样式请求")]),_._v(" "),t("ul",[t("li",[_._v("virtual int setLayoutCapacity(EV_LAYOUT_MODE mode, EV_LAYOUT_TYPE types[], unsigned int size)")]),_._v(" "),t("li",[_._v("virtual int setLayout(EVLayoutRequest & layout)")])]),_._v(" "),t("h4",{attrs:{id:"其他方法"}},[_._v("其他方法")]),_._v(" "),t("ul",[t("li",[_._v("virtual std::string getSerialNumber()")])]),_._v(" "),t("p",[_._v("获取设备 SN 号")]),_._v(" "),t("ul",[t("li",[_._v("virtual std::string getPlatform()")])]),_._v(" "),t("p",[_._v("获取设备类型")]),_._v(" "),t("h2",{attrs:{id:"附录"}},[_._v("附录")]),_._v(" "),t("h3",{attrs:{id:"错误码"}},[_._v("错误码")]),_._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("typedef enum _EV_SERVER_ERROR {\n    EV_SERVER_API_VERSION_NOT_SUPPORTED = 1000,\n    EV_SERVER_INVALID_TOKEN = 1001,\n    EV_SERVER_INVALID_PARAMETER = 1002,\n    EV_SERVER_INVALID_DEVICESN = 1003,\n    EV_SERVER_INVALID_MEDIA_TYPE = 1004,\n    EV_SERVER_PERMISSION_DENIED = 1005,\n    EV_SERVER_WRONG_FIELD_NAME = 1006,\n    EV_SERVER_INTERNAL_SYSTEM_ERROR = 1007,\n    EV_SERVER_OPERATION_FAILED = 1008,\n    EV_SERVER_GET_FAILED = 1009,\n    EV_SERVER_NOT_SUPPORTED = 1010,\n    EV_SERVER_REDIS_LOCK_TIMEOUT = 1011, \n    EV_SERVER_LOCAL_ZONE_STOPPED = 1019,\n    EV_SERVER_INVALID_USER_NAME_PASSWORD = 1100,\n    EV_SERVER_LOGIN_FAILED_MORE_THAN_5_TIMES = 1101,\n    EV_SERVER_ACCOUNT_TEMPORARILY_LOCKED = 1102,\n    EV_SERVER_ACCOUNT_DISABLED = 1103,\n    EV_SERVER_NO_USERNAME = 1104,\n    EV_SERVER_EMAIL_MISMATCH = 1105,\n    EV_SERVER_COMPANY_ADMINISTRATOR_NOT_IN_ANY_COMPANY = 1106,\n    EV_SERVER_FILE_UPLOAD_FAILED = 1200,\n    EV_SERVER_INVALID_LICENSE = 1201,\n    EV_SERVER_INVALID_IMPORT_USER_FILE = 1202,\n    EV_SERVER_INVALID_TIME_SERVICE_ADDRESS = 1300,\n    EV_SERVER_FAILED_UPDATE_SYSTEM_PROPERTIES = 1301,\n    EV_SERVER_CONF_NOT_EXISTS = 1400,\n    EV_SERVER_NUMERICID_CONFLICTS = 1401,\n    EV_SERVER_CONF_UPDATING_IN_PROGRESS = 1402,\n    EV_SERVER_CONF_DELETING_IN_PROGRESS = 1403,\n    EV_SERVER_CONF_TERMINATING_IN_PROGRESS = 1404,\n    EV_SERVER_CONF_LAUNCHING_IN_PROGRESS = 1405,\n    EV_SERVER_CONF_NOT_IN_APPROVED_STATUS = 1406,\n    EV_SERVER_CONF_NUMERICID_ONGOING = 1407,\n    EV_SERVER_CONF_NOT_APPROVED_OR_ONGOING = 1409,\n    EV_SERVER_PARTICIPANT_NOT_EXISTS_IN_CONF = 1410,\n    EV_SERVER_NUMERICID_ALREADY_IN_USE = 1412,\n    EV_SERVER_INVALID_CONF_TIME = 1415,\n    EV_SERVER_INVALID_CONF_ID = 1418,\n    EV_SERVER_NOT_FOUND_SUITABLE_MRU = 1421,\n    EV_SERVER_NOT_FOUND_SUITABLE_GATEWAY = 1422,\n    EV_SERVER_FAILED_TO_CONNECT_MRU = 1424,\n    EV_SERVER_NOT_ALLOW_DUPLICATED_NAME = 1427,\n    EV_SERVER_NOT_FOUND_CONF_IN_REDIS = 1430,\n    EV_SERVER_NOT_IN_LECTURER_MODE = 1431,\n    EV_SERVER_FAILED_TO_MUTE_ALL_PARTICIPANTS = 1433,\n    EV_SERVER_FAILED_TO_CONNECT_PARTICIPANT = 1436,\n    EV_SERVER_FAILED_TO_DISCONNECT_PARTICIPANT = 1439,\n    EV_SERVER_FAILED_TO_CHANGE_LAYOUT = 1442,\n    EV_SERVER_FAILED_TO_SET_SUBTITLE = 1445,\n    EV_SERVER_FAILED_TO_MUTE_PARTICIPANT_AUDIO = 1448,\n    EV_SERVER_FAILED_TO_DELETE_PARTICIPANT = 1451,\n    EV_SERVER_FAILED_TO_INVITE_AVC_ENDPOINT = 1454,\n    EV_SERVER_FAILED_TO_INVITE_SVC_ENDPOINTS = 1455,\n    EV_SERVER_CONF_ROOM_COMPLETELY_FULL = 1456,\n    EV_SERVER_TIMEOUT_TO_GENERATE_NUMERICID = 1457,\n    EV_SERVER_NOT_FOUND_PROFILE_NAMED_SVC = 1460,\n    EV_SERVER_FAILED_TO_PROLONG_CONF = 1463,\n    EV_SERVER_INVALID_MEETING_CONTROL_REQUEST = 1500,\n    EV_SERVER_NAME_IN_USE = 1600,\n    EV_SERVER_EMPTY_ENDPOINT_NAME = 1601,\n    EV_SERVER_EMPTY_ENDPOINT_CALL_MODE = 1602,\n    EV_SERVER_EMPTY_ENDPOINT_SIP_USERNAME = 1603,\n    EV_SERVER_EMPTY_ENDPOINT_SIP_PASSWORD = 1604,\n    EV_SERVER_EMPTY_ENDPOINT_ADDRESS = 1605,\n    EV_SERVER_INVALID_SIP_USERNAME = 1606,\n    EV_SERVER_INVALID_IP_ADDRESS = 1607,\n    EV_SERVER_ENDPOINT_NOT_EXIST = 1608,\n    EV_SERVER_E164_IN_USE = 1609,\n    EV_SERVER_ENDPOINT_DEVICE_SN_EXIST = 1610,\n  \tEV_SERVER_SIP_USERNAME_REGISTERED = 1611,\n    EV_SERVER_ENDPOINT_E164_INVALID = 1612,\n    EV_SERVER_NOT_FOUND_ENDPOINT_DEVICE_SN = 1613,\n    EV_SERVER_NOT_FOUND_ENDPOINT_PROVISION_TEMPLATE = 1614,\n    EV_SERVER_DEVICE_SN_EXISTS = 1615,\n    EV_SERVER_CAN_NOT_DELETE_USER_IN_RESERVED_MEETING = 1700,\n    EV_SERVER_EMPTY_USER_PASSWORD = 1701,\n    EV_SERVER_EMPTY_USERNAME = 1702,\n    EV_SERVER_EMPTY_USER_DISPLAY_NAME = 1703,\n    EV_SERVER_INVALID_USER_EMAIL = 1704,\n    EV_SERVER_INVALID_CELLPHONE_NUMBER = 1705,\n    EV_SERVER_ORIGINAL_PASSWORD_WRONG = 1706,\n    EV_SERVER_DUPLICATE_EMAIL_NAME = 1707,\n    EV_SERVER_DUPLICATE_CELLPHONE_NUMBER = 1708,\n    EV_SERVER_DUPLICATE_USERNAME = 1709,\n    EV_SERVER_INVALID_CONF_ROOM_MAX_CAPACITY = 1710,\n    EV_SERVER_SHOULD_ASSIGN_DEPARTMENT_TO_DEPARTMENT_ADMINISTRATOR = 1711,\n    EV_SERVER_EMPTY_USER_EMAIL = 1712,\n    EV_SERVER_EMPTY_USER_CELLPHONE_NUMBER = 1713,\n    EV_SERVER_NOT_ORGANIZATION_ADMINISTRATOR = 1714,\n    EV_SERVER_COMPANY_NOT_EXIST = 1800,\n    EV_SERVER_SHORT_NAME_OF_COMPANY_USED = 1801,\n    EV_SERVER_FULL_NAME_OF_COMPANY_USED = 1802,\n    EV_SERVER_COMPANY_NOT_EMPTY = 1803,\n    EV_SERVER_EMPTY_COMPANY_SHORT_NAME = 1804,\n    EV_SERVER_AGENT_IN_USE = 1900,\n    EV_SERVER_SHORT_NAME_IN_USE = 1901,\n    EV_SERVER_FULL_NAME_IN_USE = 1902,\n    EV_SERVER_AGENT_NOT_EXIST = 1903,\n    EV_SERVER_AGENT_NOT_EMPTY = 1904,\n    EV_SERVER_CONF_ROOM_EXPIRED = 2000,\n\n    EV_SERVER_NOT_ACTIVED = 2001,\n\n    EV_SERVER_NOT_FOUND_SUITABLE_ROOM = 2003,\n    EV_SERVER_NOT_FOUND_TEMPLATE_OR_ROOM = 2005,\n    EV_SERVER_CONF_ROOM_IN_USE = 2006,\n    EV_SERVER_CONF_ROOM_NUMBER_IN_USE = 2009,\n    EV_SERVER_CONF_ROOM_CAPACITY_EXCEEDS_LIMIT = 2012,\n    EV_SERVER_INVALID_CONF_ROOM_CAPACITY = 2015, \t\t\t//PASSWORD REQUIRED\n    EV_SERVER_INVALID_CONF_ROOM_NUMBER = 2018,\n    EV_SERVER_ROOM_NOT_EXISTS = 2021,\n\n    EV_SERVER_ROOM_NOT_ALLOW_ANONYMOUS_CALL = 2031,\n    EV_SERVER_ROOM_ONLY_ALLOW_OWNER_ACTIVE = 2033,\n    EV_SERVER_TRIAL_PERIOD_EXPIRED = 2035,\n\n    EV_SERVER_CAN_NOT_DELETE_DEPARTMENT_WITH_SUBORDINATE_DEPARTMENT = 2100,\n    EV_SERVER_CAN_NOT_DELETE_DEPARTMENT_WITH_USERS_OR_ENDPOINTS = 2101,\n    EV_SERVER_INVALID_ACS_CONFIGURATION = 2200\n} EV_SERVER_ERROR;\n\n//Error code from locate server\ntypedef enum _EV_LOCATE_ERROR {\n    EV_LOCATE_FAILED_TO_READ_BODY = 10000,\n    EV_LOCATE_FAILED_TO_PARSE_BODY = 10001,\n    EV_LOCATE_LOCATION_TIMEOUT = 10002,\n    EV_LOCATE_ERROR_INFO_GENERAL = 10003,\n    EV_LOCATE_ERROR_INFO_BAD_FORMAT = 10004,\n    EV_LOCATE_UNEXPECTED = 10005,\n    EV_LOCATE_FAILED_TO_LOCATE_CLIENT = 10006,\n    EV_LOCATE_FAILED_TO_LOCATE_ZONE = 10007,\n    EV_LOCATE_NO_LOCATION_DOMAIN = 10008,\n    EV_LOCATE_ERROR_LOCATION_REQUEST = 10009\n} EV_LOCATE_ERROR;\n\ntypedef enum _EV_CALL_ERROR {\n    EV_CALL_INVALID_NUMERICID = 1001,\n    EV_CALL_INVALID_USERNAME = 1003,\n    EV_CALL_INVALID_USERID = 1005,\n    EV_CALL_INVALID_DEVICEID = 1007,\n    EV_CALL_INVALID_ENDPOINT = 1009,\n    EV_CALL_SERVER_UNLICENSED = 2001,\n    EV_CALL_NOT_FOUND_SUITABLE_MRU = 2003,\n    EV_CALL_NEITHER_TEMPLATE_NOR_ONGOING_NOR_BINDED_ROOM = 2005,\n    EV_CALL_LOCK_TIMEOUT = 2007,\n    EV_CALL_TEMPLATE_CONF_WITHOUT_CONFROOM = 2009,\n    EV_CALL_ROOM_EXPIRED = 2011,\n    EV_CALL_INVALID_PASSWORD = 2015,\n    EV_CALL_NO_TIME_SPACE_TO_ACTIVATE_ROOM = 2017,\n    EV_CALL_CONF_PORT_COUNT_USED_UP = 2023,\n    EV_CALL_ORG_PORT_COUNT_USED_UP = 2024,\n    EV_CALL_HAISHEN_PORT_COUNT_USED_UP = 2025,\n    EV_CALL_HAISHEN_GATEWAY_AUDIO_PORT_COUNT_USED_UP = 2027,\n    EV_CALL_HAISHEN_GATEWAY_VIDEO_PORT_COUNT_USED_UP = 2029,\n    EV_CALL_ONLY_ROOM_OWNER_CAN_ACTIVATE_ROOM = 2031,\n    EV_CALL_NOT_ALLOW_ANONYMOUS_PARTY = 2033,\n    EV_CALL_TRIAL_ORG_EXPIRED = 2035,\n    EV_CALL_LOCAL_ZONE_NOT_STARTED = 2043,\n    EV_CALL_LOCAL_ZONE_STOPPED = 2045\n} EV_CALL_ERROR;\n")])])])])}),[],!1,null,null,null);n.default=E.exports}}]);